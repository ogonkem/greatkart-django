create 'greatkart' project folder
create 'greatkart_notes' text file

open git bash within 'greatkart' project folder
install virtual Environment with the git bash
$ python -m venv env => creates virtual environment (env folder)
$ source env/Scripts/activate => enter into the virtual environment
$ deactivate => exits the virtual environment

$ pip freeze => check independencies within virtual environment

$ pip install django==3.1
$ django-admin startproject greatkart . => crreate django project
$ python manage.py runserver
visit 127.0.0.1:8000 => django homepage

open Atom ide
urls.py
from . import views
add to urlpattarns => path('', views.home, name='home'),

Create views.py within greatkart
views.py

Create templates Folder
create home.html within templates folder
in settings.py in TEMPLATES = [ {...'DIR': ['templates'],...

create static folder within greatkart
paste css, images, js and fonts folders into static folder
in settings.py below => STATIC_URL = '/static/'
type => 
Static_ROOT = BASE_DIR '/static'
STATICFILES_DIR = [
    'greatkart/static',
]
BASE_DIR => means root folder also in settings above
{% load static %} => insert into all pages requiring => "{% static 'images/banners/1.jpg' %}"

$ python manage.py collectstatic => copies static folder to the root directory "GreatKart"

make base templete
create base.html
cut body and header tags from home.html and paste in base.html
initiate 
{% block content %}
<!-- content --> => different pages
{% endblock %}

create includes/footer.html and includes/navbar.html
<!-- navbar -->
{% include 'includes/navbar.html' %}
....
<!-- footer -->
{% include 'includes/footer.html' %}

$ python manage.py startapp category
insert 'category', in INSTALLED_APPS
create Category model in models.py
register Category model in admin.py
pip install Pillow => for images
make migrations and migrate

create admin superuser
winpty python manage.py createsuperuser
Username (leave blank to use 'ogonk'): greatkart_admin1
Email address: oseejobs@gmail.com
Password:
Password (again):
Superuser created successfully.

within the admin django pluralizes the models by adding 's' to model name
e.g. category = categorys
to correct this =>
class Meta:
        verbose_name = 'category'
        verbose_name_plural = 'categories'

using custom user model
$ python manage.py startapp accounts
insert 'accounts', in INSTALLED_APPS in settings.py

create Accounts model in models.py
override already created admin by creating =>
class MyAccountManager(BaseUserManager)
class Account(AbstractBaseUser)
insert AUTH_USER_MODEL = 'accounts.Account' in settings.py

register Accounts model in accounts/admin.py
delete db.sqlite3
delete 2 py files in category
python manage.py runserver => reinitialise db.sqlite3
python manage.py makemigrations 
python manage.py migrate

create class AccountAdmin(UserAdmin) in accounts/admin.py => set criteria for custom user

setup media file (photos etc)
in settings below static setup
# media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR /'media'
in greatkart/urls.py add below to urlpatterns
+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

prepopulate slug field with category_name
in category/model.py change slug CharField to SlugField
in category/admin.py create categoryAdmin class
prepopulated_fields = {'Slug': ('category_name',)}
list_display = ('category_name', 'slug') => listed in admin ui

download sqliteStudio
add a database
add GreatKart/db.sqlite
connect to database

add categories in admin

$ python manage.py startapp store
insert 'store', in INSTALLED_APPS in settings.py
create Product model in store/models.py
register Products model in store/admin.py

prepopulate slug field with category_name
in store/admin.py create ProductAdmin class
prepopulated_fields = {'Slug': ('product_name',)}
list_display = ('product_name', 'price',...) => listed in admin ui

get all product from store/models => from store.models import Product
edit def home in greatkart/views

delete redundant divs
loop through products while inserting product objects
{% for product in products %}
...
<img src="{{ product.images.url }}"> </a>...
<a href="./product-detail.html" class="title">{{ product.product_name }}</a>...
<div class="price mt-1">{{ product.price }}</div> <!-- price-wrap.// -->...
...
{% endfor %}

insert below to greatkart/urls
import include => from django.urls import path, include
path('store/', include('store.urls')),
copy and past urls.py to store app
insert to store/urls=> path('', views.store, name='store'),
insert to store/views => def store(request): => render => store/store.html

fetch products by category
insert => path('<slug:category_slug>/', views.store, name='products_by_category'),
into urlpatterns in store/urls
edit def store
def store(request, category_slug=None): => if category is in url or not
if category_slug != None:  => if category is in url or not

takes a request as an argument and returns dictionary of data as a context
create category/context_processors.py
create def menu_links(request):
add 'category.context_processors.menu_links', => TEMPLATES|OPTIONS|context_processors
so as to use menu_links in any template
in templates/include/navbar.html insert below in line 40 - 42
{% for category in links %}
  <a class="dropdown-item" href="{{ category.get_url }}">{{ category.category_name }}</a>
{% endfor %}
create def get_url in category/models.py category
reverse gets url by url name(products_by_category) from store/urls.py 
in templates/store/store.html insert below in line 33 - 35
{% for category in links %}
  <li><a href="{{ category.get_url }}">{{ category.category_name }}</a></li>
{% endfor %}

create product detail page
insert below in store/urls.py
path('<slug:category_slug>/<slug:product_slug>/', views.product_detail, name='product_detail'),
create def product_detail(request, category_slug, product_slug): => store/views.py

create def get_url in store/models.py Product
reverse gets url by url name(products_details) from store/urls.py 
in templates/store/store.html insert below in line 132|135
<a href="{{ product.get_url }}"....
<a href="{{ product.get_url }}"....

























